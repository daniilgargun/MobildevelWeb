document.addEventListener('DOMContentLoaded', () => {
    const loginButton = document.getElementById('auth-button');
    const loginModalOverlay = document.querySelector('.login-modal-overlay');
    const closeModalButton = document.querySelector('.close-modal-button');
    const loginForm = document.querySelector('.login-form');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const usernameError = document.getElementById('username-error');
    const passwordError = document.getElementById('password-error');
    const registerForm = document.querySelector('.register-form');
    const regUsernameInput = document.getElementById('reg-username');
    const regEmailInput = document.getElementById('reg-email');
    const regPasswordInput = document.getElementById('reg-password');
    const regConfirmPasswordInput = document.getElementById('reg-confirm-password');
    const regUsernameError = document.getElementById('reg-username-error');
    const regEmailError = document.getElementById('reg-email-error');
    const regPasswordError = document.getElementById('reg-password-error');
    const regConfirmPasswordError = document.getElementById('reg-confirm-password-error');
    const passwordStrength = document.getElementById('password-strength');
    const showRegisterLink = document.getElementById('show-register');
    const showLoginLink = document.getElementById('show-login');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
    const logoutModalOverlay = document.querySelector('.logout-modal-overlay');
    const confirmLogoutButton = document.querySelector('.confirm-logout-button');
    const cancelLogoutButton = document.querySelector('.cancel-logout-button');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    function clearErrors() {
        const errorMessages = document.querySelectorAll('.error-message');
        errorMessages.forEach(el => el.textContent = '');
        const inputs = document.querySelectorAll('.input-group input');
        inputs.forEach(input => input.classList.remove('error'));
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    function showError(element, message) {
        element.textContent = message;
        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π input-group –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å error –∫ –∏–Ω–ø—É—Ç—É
        const inputElement = element.previousElementSibling;
        if (inputElement && inputElement.tagName === 'INPUT') {
            inputElement.classList.add('error');
        } else {
            // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –∏–Ω–ø—É—Ç, –∏—â–µ–º –∏–Ω–ø—É—Ç –≤–Ω—É—Ç—Ä–∏ password-input-wrapper
            const parentWrapper = element.closest('.password-input-wrapper');
            if (parentWrapper) {
                const inputInWrapper = parentWrapper.querySelector('input');
                if (inputInWrapper) {
                    inputInWrapper.classList.add('error');
                }
            }
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    document.querySelectorAll('.toggle-password').forEach(button => {
        button.addEventListener('click', () => {
            const passwordInput = button.previousElementSibling;
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
            button.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';
        });
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    function checkPasswordStrength(password) {
        let strength = 0;
        const messages = [];

        if (password.length >= 8) {
            strength++;
        } else {
            messages.push('–ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        if (password.match(/[a-z]/)) strength++;
        else messages.push('—Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã');
        if (password.match(/[A-Z]/)) strength++;
        else messages.push('–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã');
        if (password.match(/[0-9]/)) strength++;
        else messages.push('—Ü–∏—Ñ—Ä—ã');
        if (password.match(/[^a-zA-Z0-9]/)) strength++;
        else messages.push('—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã');

        let strengthText = '';
        let strengthClass = '';

        if (password.length === 0) {
            strengthText = '';
            strengthClass = '';
        } else if (strength < 3) {
            strengthText = `–°–ª–∞–±—ã–π: ${messages.join(', ')}`;
            strengthClass = 'weak';
        } else if (strength === 3) {
            strengthText = `–°—Ä–µ–¥–Ω–∏–π`;
            strengthClass = 'medium';
        } else {
            strengthText = `–°–∏–ª—å–Ω—ã–π`;
            strengthClass = 'strong';
        }

        passwordStrength.textContent = strengthText;
        passwordStrength.className = 'password-strength ' + strengthClass;
        return strengthText; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    }

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function saveUserToLocalStorage(username) {
        localStorage.setItem('loggedInUser', username);
        updateAuthButton(username);
    }

    function removeUserFromLocalStorage() {
        localStorage.removeItem('loggedInUser');
        updateAuthButton(null);
    }

    function getLoggedInUser() {
        return localStorage.getItem('loggedInUser');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
    function updateAuthButton(username) {
        if (username) {
            loginButton.textContent = username;
            loginButton.setAttribute('data-logged-in', 'true');
            loginButton.removeEventListener('click', openLoginModal);
            loginButton.addEventListener('click', openLogoutModal);
        } else {
            loginButton.textContent = '–í–æ–π—Ç–∏';
            loginButton.setAttribute('data-logged-in', 'false');
            loginButton.removeEventListener('click', openLogoutModal);
            loginButton.addEventListener('click', openLoginModal);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const currentUser = getLoggedInUser();
    if (currentUser) {
        updateAuthButton(currentUser);
    } else {
        updateAuthButton(null); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ "–í–æ–π—Ç–∏"
    }

    function openLoginModal() {
        loginModalOverlay.classList.add('active');
        document.body.style.overflow = 'hidden'; // –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        loginForm.style.display = 'block';
        registerForm.style.display = 'none';
        clearErrors();
        loginForm.reset();
        registerForm.reset();
        passwordStrength.textContent = '';
        passwordStrength.className = 'password-strength';
    }

    function closeLoginModal() {
        loginModalOverlay.classList.remove('active');
        document.body.style.overflow = ''; // –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        clearErrors();
        loginForm.reset();
        registerForm.reset();
        passwordStrength.textContent = '';
        passwordStrength.className = 'password-strength';
    }

    function openLogoutModal() {
        logoutModalOverlay.classList.add('active');
        document.body.style.overflow = 'hidden'; // –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    function closeLogoutModal() {
        logoutModalOverlay.classList.remove('active');
        document.body.style.overflow = ''; // –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (regPasswordInput) {
        regPasswordInput.addEventListener('input', (e) => {
            checkPasswordStrength(e.target.value);
            regPasswordError.textContent = ''; // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ
        });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    if (loginForm) {
        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            clearErrors();

            let isValid = true;
            const username = usernameInput.value.trim();
            const password = passwordInput.value.trim();

            if (username === '') {
                showError(usernameError, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                isValid = false;
            }

            if (password === '') {
                showError(passwordError, '–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                isValid = false;
            }

            // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
            const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers')) || {};
            if (isValid) {
                if (registeredUsers[username] && registeredUsers[username].password === password) {
                    saveUserToLocalStorage(username);
                    alert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!`);
                    closeLoginModal();
                } else {
                    showError(usernameError, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                    showError(passwordError, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                    isValid = false;
                }
            }
        });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (registerForm) {
        registerForm.addEventListener('submit', (e) => {
            e.preventDefault();
            clearErrors();

            let isValid = true;
            const regUsername = regUsernameInput.value.trim();
            const regEmail = regEmailInput.value.trim();
            const regPassword = regPasswordInput.value;
            const regConfirmPassword = regConfirmPasswordInput.value;

            if (regUsername === '') {
                showError(regUsernameError, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                isValid = false;
            } else {
                const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers')) || {};
                if (registeredUsers[regUsername]) {
                    showError(regUsernameError, '–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ');
                    isValid = false;
                }
            }

            if (regEmail === '') {
                showError(regEmailError, 'Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                isValid = false;
            } else if (!/^[\w-]+(?:\.[\w-]+)*@(?:[\w-]+\.)+[a-zA-Z]{2,7}$/.test(regEmail)) {
                showError(regEmailError, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email');
                isValid = false;
            }

            if (regPassword === '') {
                showError(regPasswordError, '–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                isValid = false;
            } else {
                const strengthText = checkPasswordStrength(regPassword);
                if (strengthText.includes('–°–ª–∞–±—ã–π')) {
                    showError(regPasswordError, '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π');
                    isValid = false;
                }
            }

            if (regConfirmPassword === '') {
                showError(regConfirmPasswordError, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
                isValid = false;
            } else if (regPassword !== regConfirmPassword) {
                showError(regConfirmPasswordError, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
                isValid = false;
            }

            if (isValid) {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                let registeredUsers = JSON.parse(localStorage.getItem('registeredUsers')) || {};
                registeredUsers[regUsername] = {
                    email: regEmail,
                    password: regPassword
                };
                localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));

                saveUserToLocalStorage(regUsername);
                alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
                closeLoginModal();
            }
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞
    if (loginButton && loginButton.getAttribute('data-logged-in') === 'false') {
        loginButton.addEventListener('click', openLoginModal);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
    if (closeModalButton) {
        closeModalButton.addEventListener('click', closeLoginModal);
    }
    if (loginModalOverlay) {
        loginModalOverlay.addEventListener('click', (e) => {
            if (e.target === loginModalOverlay) {
                closeLoginModal();
            }
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º
    if (showRegisterLink) {
        showRegisterLink.addEventListener('click', (e) => {
            e.preventDefault();
            loginForm.style.display = 'none';
            registerForm.style.display = 'block';
            clearErrors();
            passwordStrength.textContent = '';
            passwordStrength.className = 'password-strength';
        });
    }

    if (showLoginLink) {
        showLoginLink.addEventListener('click', (e) => {
            e.preventDefault();
            registerForm.style.display = 'none';
            loginForm.style.display = 'block';
            clearErrors();
            passwordStrength.textContent = '';
            passwordStrength.className = 'password-strength';
        });
    }

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
    if (confirmLogoutButton) {
        confirmLogoutButton.addEventListener('click', () => {
            removeUserFromLocalStorage();
            alert('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.');
            closeLogoutModal();
        });
    }

    if (cancelLogoutButton) {
        cancelLogoutButton.addEventListener('click', () => {
            closeLogoutModal();
        });
    }

    if (logoutModalOverlay) {
        logoutModalOverlay.addEventListener('click', (e) => {
            if (e.target === logoutModalOverlay) {
                closeLogoutModal();
            }
        });
    }
}); 